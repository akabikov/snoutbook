{"version":3,"sources":["List.jsx","Card.jsx","NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["List","listName","this","props","list","data","map","name","src","className","key","to","alt","React","Component","Card","history","item","find","el","descr","factsList","facts","fact","i","onClick","goBack","withRouter","NavBar","links","data-toggle","data-target","exact","replace","m","toUpperCase","type","aria-controls","aria-expanded","aria-label","id","App","Object","keys","path","render","match","params","Boolean","window","location","hostname","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAsBeA,G,6KAhBH,IACAC,EAAaC,KAAKC,MAAlBF,SAEFG,EAAOC,EAAKJ,GAAUK,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAT,qCAC9B,wBAAIC,UAAU,sCAAsCC,IAAKH,GACvD,kBAAC,IAAD,CAAMI,GAAE,WAAMV,EAAN,YAAkBO,IACxB,yBAAKA,IAAG,gBAAWA,EAAX,QAAsBI,IAAKL,IACnC,wBAAIE,UAAU,kBAAkBF,QAKtC,OAAO,wBAAIE,UAAU,OAAOL,O,GAbbS,IAAMC,YCAnBC,G,6KACM,IAAD,EAC4Bb,KAAKC,MAAhCF,EADD,EACCA,SAAUO,EADX,EACWA,IAAKQ,EADhB,EACgBA,QAEjBC,EAAOZ,EAAKJ,GAAUiB,MAAK,SAACC,GAAD,OAAQA,EAAGX,MAAQA,KAEpD,IAAKS,EAAM,OAAO,kBAAC,IAAD,CAAUN,GAAE,WAAMV,KAL7B,IAOCM,EAAuBU,EAAvBV,KAAMa,EAAiBH,EAAjBG,MACRC,EADyBJ,EAAVK,MACGhB,KAAI,SAACiB,EAAMC,GAAP,OAC1B,wBAAIf,UAAU,kBAAkBC,IAAKc,GAClCD,MAIL,OACE,yBAAKd,UAAU,mCACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,QACb,yBACEA,UAAU,eACVD,IAAG,iBAAYA,EAAZ,QACHI,IAAKL,IAEP,yBAAKE,UAAU,aACb,wBAAIA,UAAU,cAAcF,GAC5B,wBAAIE,UAAU,4BAA4BW,IAE5C,wBAAIX,UAAU,+BAA+BY,GAC7C,yBAAKZ,UAAU,aACb,4BAAQA,UAAU,eAAegB,QAAST,EAAQU,QAAlD,mB,GA9BKb,IAAMC,YAyCVa,cAAWZ,GCWXa,E,uKApDH,IACA3B,EAAaC,KAAKC,MAAlBF,SACF4B,EAAQxB,EAAKJ,GAAUK,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAT,OAC/B,wBACEC,UAAU,WACVqB,cAAY,WACZC,cAAY,aACZrB,IAAKF,GAEL,kBAAC,IAAD,CAASwB,OAAK,EAACrB,GAAE,WAAMV,EAAN,YAAkBO,GAAOC,UAAU,YACjDF,OAKP,OACE,yBAAKE,UAAU,+CACb,kBAAC,IAAD,CAAMA,UAAU,eAAeE,GAAE,WAAMV,IACpCA,EAASgC,QAAQ,OAAO,SAACC,GAAD,OAAOA,EAAEC,kBAGpC,4BACE1B,UAAU,iBACV2B,KAAK,SACLN,cAAY,WACZC,cAAY,aACZM,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAM9B,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2B+B,GAAG,aAC3C,wBAAI/B,UAAU,cACZ,wBACEA,UAAU,WACVqB,cAAY,WACZC,cAAY,cAEZ,kBAAC,IAAD,CAASC,OAAK,EAACrB,GAAE,WAAMV,GAAYQ,UAAU,YAA7C,SAIDoB,S,GA7CQhB,IAAMC,WCkCZ2B,E,uKA9BH,IAAD,EACYC,OAAOC,KAAKtC,GAAxBJ,EADA,oBAGP,OACE,oCACE,gCACE,kBAAC,EAAW,CAAEA,cAEhB,0BAAMQ,UAAU,aACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEuB,OAAK,EACLY,KAAI,WAAM3C,EAAN,SACJ4C,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,kBAAC,EAAS,CAAE7C,WAAUO,IAAKsC,EAAMC,OAAOvC,SAG5C,kBAAC,IAAD,CACEwB,OAAK,EACLY,KAAI,WAAM3C,GACV4C,OAAQ,kBAAM,kBAAC,EAAS,CAAE5C,gBAE5B,kBAAC,IAAD,CAAUU,GAAE,WAAMV,Y,GAvBZY,IAAMC,WCKJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCTNM,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,cACvB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8e7b62f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport data from \"./data.json\";\r\nimport \"./List.css\";\r\n\r\nclass List extends React.Component {\r\n  render() {\r\n    const { listName } = this.props;\r\n\r\n    const list = data[listName].map(({ name, src, ...item }) => (\r\n      <li className='list-item col-lg-4 text-center mt-5' key={name}>\r\n        <Link to={`/${listName}/${src}`}>\r\n          <img src={`./img/${src}.jpg`} alt={name} />\r\n          <h3 className='underline mt-4'>{name}</h3>\r\n        </Link>\r\n      </li>\r\n    ));\r\n\r\n    return <ul className='row'>{list}</ul>;\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport data from \"./data.json\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends React.Component {\r\n  render() {\r\n    const { listName, src, history } = this.props;\r\n\r\n    const item = data[listName].find((el) => el.src === src);\r\n\r\n    if (!item) return <Redirect to={`/${listName}`} />;\r\n\r\n    const { name, descr, facts } = item;\r\n    const factsList = facts.map((fact, i) => (\r\n      <li className='list-group-item' key={i}>\r\n        {fact}\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <div className='row justify-content-center mt-5'>\r\n        <div className='col-11 col-lg-5'>\r\n          <div className='card'>\r\n            <img\r\n              className='card-img-top'\r\n              src={`../img/${src}.jpg`}\r\n              alt={name}\r\n            />\r\n            <div className='card-body'>\r\n              <h2 className='card-title'>{name}</h2>\r\n              <h4 className='card-subtitle text-muted'>{descr}</h4>\r\n            </div>\r\n            <ul className='list-group list-group-flush'>{factsList}</ul>\r\n            <div className='card-body'>\r\n              <button className='btn btn-info' onClick={history.goBack}>\r\n                Go Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Card);\r\n","import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport data from \"./data.json\";\r\n\r\nclass NavBar extends React.Component {\r\n  render() {\r\n    const { listName } = this.props;\r\n    const links = data[listName].map(({ name, src }) => (\r\n      <li\r\n        className='nav-item'\r\n        data-toggle='collapse'\r\n        data-target='#navbarNav'\r\n        key={src}\r\n      >\r\n        <NavLink exact to={`/${listName}/${src}`} className='nav-link'>\r\n          {name}\r\n        </NavLink>\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <nav className='navbar navbar-expand-lg navbar-dark bg-dark'>\r\n        <Link className='navbar-brand' to={`/${listName}`}>\r\n          {listName.replace(/^\\w/, (m) => m.toUpperCase())}\r\n        </Link>\r\n\r\n        <button\r\n          className='navbar-toggler'\r\n          type='button'\r\n          data-toggle='collapse'\r\n          data-target='#navbarNav'\r\n          aria-controls='navbarNav'\r\n          aria-expanded='false'\r\n          aria-label='Toggle navigation'\r\n        >\r\n          <span className='navbar-toggler-icon' />\r\n        </button>\r\n\r\n        <div className='collapse navbar-collapse' id='navbarNav'>\r\n          <ul className='navbar-nav'>\r\n            <li\r\n              className='nav-item'\r\n              data-toggle='collapse'\r\n              data-target='#navbarNav'\r\n            >\r\n              <NavLink exact to={`/${listName}`} className='nav-link'>\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            {links}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport List from \"./List\";\nimport Card from \"./Card\";\nimport NavBar from \"./NavBar\";\nimport data from \"./data.json\";\n\nclass App extends React.Component {\n  render() {\n    const [listName] = Object.keys(data);\n\n    return (\n      <>\n        <header>\n          <NavBar {...{ listName }} />\n        </header>\n        <main className='container'>\n          <Switch>\n            <Route\n              exact\n              path={`/${listName}/:src`}\n              render={({ match }) => (\n                <Card {...{ listName, src: match.params.src }} />\n              )}\n            />\n            <Route\n              exact\n              path={`/${listName}`}\n              render={() => <List {...{ listName }} />}\n            />\n            <Redirect to={`/${listName}`} />\n          </Switch>\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}